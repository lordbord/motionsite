---
import Layout from '../layouts/Layout.astro';
import Window from '../components/Window.astro';
import Button from '../components/Button.astro';
import { Image } from 'astro:assets';
import { readdir } from 'node:fs/promises';
import path from 'node:path';

interface Photo {
  url: string;
  title: string;
  description: string;
}

// Get all photos from the photowall directory
const photowallDir = path.join(process.cwd(), 'public', 'photowall');
const files = await readdir(photowallDir);
const photos: Photo[] = files
  .filter((file: string) => /\.(jpg|jpeg|png|gif|webp)$/i.test(file))
  .map((file: string) => ({
    url: `/photowall/${file}`,
    title: file.toUpperCase(),
    description: file.replace(/\.[^/.]+$/, '').split(/[-_]/).join(' ')
  }));
---

<Layout title="L0RD J0RD'$ PH0T0 W4LL">
  <main class="container mx-auto px-4 py-8 min-h-screen overflow-y-auto">
    <div class="flex justify-between items-center mb-8 pt-24">
      <a href="/" class="group">
        <Button class="flex items-center gap-2">
          <span class="text-lg group-hover:-translate-x-1 transition-transform">←</span>
          <span>RETURN.EXE</span>
        </Button>
      </a>
      <div class="text-center flex-1">
        <h1 class="text-3xl sm:text-4xl font-bold tracking-[0.2em] text-white drop-shadow-[0_0_10px_rgba(255,106,213,0.8)]">
          PH0T0$.EXE
        </h1>
        <p class="text-white text-xs sm:text-sm mt-2 tracking-[0.3em]">⚡️ 1M4G3_D4T4B4$3 ⚡️</p>
      </div>
      <div class="w-[106px]"></div>
    </div>

    <div class="max-w-7xl mx-auto">
      <Window title="PH0T0_W4LL.SYS">
        <div class="p-3 sm:p-4">
          {photos.length === 0 ? (
            <p class="text-center py-8 text-white/60">No photos found in photowall directory...</p>
          ) : (
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {photos.map(photo => (
                <div class="group relative w-full pt-[56.25%] overflow-hidden rounded-lg hover:shadow-[0_0_20px_rgba(255,106,213,0.3)] transition-shadow">
                  <div class="absolute inset-0">
                    <Image 
                      src={photo.url}
                      alt={photo.title}
                      width={1920}
                      height={1080}
                      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      onclick={`expandImage('${photo.url}', '${photo.title}')`}
                    />
                  </div>
                  <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <div class="absolute bottom-0 left-0 right-0 p-3">
                      <h3 class="text-white font-bold truncate">{photo.title}</h3>
                      <p class="text-white/80 text-sm truncate">{photo.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </Window>
    </div>
  </main>

  <!-- Image Modal -->
  <div id="imageModal" class="fixed inset-0 z-50 hidden bg-black">
    <div class="absolute inset-0 flex items-center justify-center">
      <img id="expandedImage" src="" alt="" class="w-screen h-screen object-contain" />
      <button onclick="closeModal()" class="absolute top-4 right-4 text-white hover:text-[#FF6AD5] transition-colors text-xl z-10">
        [ CL0$3.EXE ]
      </button>
    </div>
  </div>
</Layout>

<style>
  img {
    backface-visibility: hidden;
  }

  #expandedImage {
    image-rendering: auto;
  }

  #imageModal {
    background: black;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  #imageModal.visible {
    opacity: 1;
  }

  .group:hover img {
    transform: scale(1.05);
    filter: hue-rotate(15deg) brightness(1.1);
  }

  .group {
    position: relative;
  }

  .group::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, rgba(255,106,213,0.2), rgba(173,140,255,0.2));
    opacity: 0;
    z-index: 1;
    transition: opacity 0.3s ease;
  }

  .group:hover::before {
    opacity: 1;
  }

  .group::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(transparent 50%, rgba(255,106,213,0.1) 50%);
    background-size: 100% 4px;
    opacity: 0;
    z-index: 1;
    animation: scan 4s linear infinite;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .group:hover::after {
    opacity: 0.5;
  }

  @keyframes scan {
    to {
      background-position: 0 -100%;
    }
  }

  #imageModal:-webkit-full-screen,
  #imageModal:-ms-fullscreen,
  #imageModal:fullscreen {
    width: 100vw;
    height: 100vh;
  }

  #expandedImage {
    transform: scale(0.95);
    opacity: 0;
    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1),
                opacity 0.4s ease;
  }

  #imageModal.visible #expandedImage {
    transform: scale(1);
    opacity: 1;
  }

  .modal-close {
    transform: translateY(-10px);
    opacity: 0;
    transition: all 0.3s ease;
  }

  #imageModal.visible .modal-close {
    transform: translateY(0);
    opacity: 1;
    transition-delay: 0.2s;
  }
</style>

<script is:inline>
  window.expandImage = function(src, alt) {
    const modal = document.getElementById('imageModal');
    const expandedImg = document.getElementById('expandedImage');
    if (modal && expandedImg) {
      modal.classList.remove('hidden');
      // Force reflow
      modal.offsetHeight;
      modal.classList.add('visible');
      expandedImg.src = src;
      expandedImg.alt = alt;
      document.body.style.overflow = 'hidden';
      
      if (modal.requestFullscreen) {
        modal.requestFullscreen();
      } else if (modal.webkitRequestFullscreen) {
        modal.webkitRequestFullscreen();
      } else if (modal.msRequestFullscreen) {
        modal.msRequestFullscreen();
      }
    }
  }

  window.closeModal = function() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.remove('visible');
      // Wait for animation to finish before hiding
      setTimeout(() => {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }, 300);
      
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }
    }
  }

  // Close modal when clicking outside the image
  document.getElementById('imageModal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      closeModal();
    }
  });

  // Close modal with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeModal();
    }
  });

  // Handle fullscreen change
  document.addEventListener('fullscreenchange', function() {
    if (!document.fullscreenElement) {
      closeModal();
    }
  });
  document.addEventListener('webkitfullscreenchange', function() {
    if (!document.webkitFullscreenElement) {
      closeModal();
    }
  });
</script> 