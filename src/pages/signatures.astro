---
import Layout from '../layouts/Layout.astro';
import Window from '../components/Window.astro';
import Button from '../components/Button.astro';
---

<Layout title="$1GN4TUR3_W4LL.TXT">
  <main class="container mx-auto px-4 py-8 min-h-screen overflow-y-auto">
    <div class="flex flex-col sm:flex-row sm:justify-between items-center mb-8 pt-16 sm:pt-24 relative">
      <div class="absolute top-0 left-0 sm:relative sm:top-auto sm:left-auto mb-4 sm:mb-0">
        <a href="/" class="group">
          <Button class="flex items-center gap-2">
            <span class="text-lg group-hover:-translate-x-1 transition-transform">←</span>
            <span>RETURN.EXE</span>
          </Button>
        </a>
      </div>
      <div class="text-center flex-1 sm:flex-initial">
        <h1 class="text-3xl sm:text-4xl font-bold tracking-[0.2em] text-white drop-shadow-[0_0_10px_rgba(255,106,213,0.8)]">
          $1GN4TUR3$.DB
        </h1>
        <p class="text-white text-xs sm:text-sm mt-2 tracking-[0.3em]">⚡️ L34V3_Y0UR_M4RK ⚡️</p>
      </div>
      <div class="hidden sm:block w-[106px]"></div>
    </div>

    <div class="grid gap-6 max-w-4xl mx-auto">
      <!-- Add Signature Form -->
      <Window title="4DD_$1GN4TUR3.EXE" class="w-full">
        <form id="signatureForm" class="p-4 space-y-4">
          <div class="space-y-2">
            <label for="message" class="block text-[#FF6AD5]">> L34V3_Y0UR_M4RK:</label>
            <input 
              type="text" 
              id="message" 
              name="message" 
              required
              maxlength="100"
              class="w-full bg-black/30 border-2 border-[#FF6AD5] p-2 text-white focus:outline-none focus:ring-2 focus:ring-[#FF6AD5] rounded"
              placeholder="ANON_USER_42 1$ H3R3..."
            />
          </div>
          <button 
            type="submit"
            class="w-full bg-[#FF6AD5] text-white p-2 rounded hover:bg-[#ff8de0] transition-colors"
          >
            [ $UBM1T_$1GN4TUR3.exe ]
          </button>
        </form>
      </Window>

      <!-- Signature Wall -->
      <Window title="$1GN4TUR3_W4LL.SYS" class="w-full">
        <div id="signatureWall" class="p-4 space-y-4 min-h-[200px] max-h-[600px] overflow-y-auto custom-scrollbar">
          <div class="text-center text-white/60">Loading signatures...</div>
        </div>
      </Window>
    </div>
  </main>
</Layout>

<style>
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.2);
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(255, 106, 213, 0.5);
    border-radius: 4px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 106, 213, 0.8);
  }

  input::placeholder {
    color: rgba(255, 255, 255, 0.3);
  }

  .signature {
    opacity: 0;
    animation: fadeIn 0.5s forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Cyberpunk input styling */
  input {
    position: relative;
    transition: all 0.3s ease;
  }

  input:focus {
    box-shadow: 0 0 15px rgba(255, 106, 213, 0.5);
  }

  /* Submit button glitch effect */
  button[type="submit"] {
    position: relative;
    overflow: hidden;
  }

  button[type="submit"]::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: 0.5s;
  }

  button[type="submit"]:hover::before {
    left: 100%;
  }
</style>

<script>
  interface Message {
    id: string;
    message: string;
    created_at: string;
  }

  let messages: Message[] = [];
  const signatureWall = document.getElementById('signatureWall');
  const form = document.getElementById('signatureForm') as HTMLFormElement;

  function formatDate(dateStr: string): string {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // Function to fetch signatures
  async function fetchSignatures() {
    try {
      const response = await fetch('/api/signatures');
      messages = await response.json();
      renderSignatures();
    } catch (error) {
      console.error('Error fetching signatures:', error);
      if (signatureWall) {
        signatureWall.innerHTML = '<div class="text-center text-red-400">Error loading signatures...</div>';
      }
    }
  }

  // Function to render signatures
  function renderSignatures() {
    if (!signatureWall) return;
    
    if (messages.length === 0) {
      signatureWall.innerHTML = '<div class="text-center text-white/60">No signatures yet... Be the first!</div>';
      return;
    }

    signatureWall.innerHTML = messages
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
      .map((msg, index) => `
        <div class="signature p-2 border border-[#FF6AD5]/50 hover:border-[#FF6AD5] transition-colors relative group" style="animation-delay: ${index * 0.1}s">
          <div class="message-text break-words">${msg.message}</div>
          <div class="text-[10px] text-[#C774E8] mt-1 group-hover:text-[#FF6AD5] transition-colors">
            ⚡️ ${formatDate(msg.created_at)}
          </div>
          <div class="absolute -inset-[1px] bg-[#FF6AD5]/10 opacity-0 group-hover:opacity-100 transition-opacity"></div>
        </div>
      `)
      .join('');
  }

  // Handle form submission
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const message = formData.get('message')?.toString().trim();

      if (message) {
        try {
          const response = await fetch('/api/signatures', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message })
          });

          if (!response.ok) throw new Error('Failed to submit signature');

          // Clear form
          form.reset();
          
          // Refresh signatures
          await fetchSignatures();
        } catch (error) {
          console.error('Error submitting signature:', error);
          alert('Failed to submit signature. Please try again.');
        }
      }
    });
  }

  // Initial fetch
  fetchSignatures();
  
  // Refresh signatures periodically
  setInterval(fetchSignatures, 30000);
</script> 